// (cmd e)
//
// Developer: Geert Wille
// Merged assets generation for Android, windows phone and iOS devices

// Parameters
var options = ['Android/iOS', 'Android/iOS/WP', 'iOS', 'Android', 'WP', 'Web']

var iosFactors = [
    ["", 1, ""],
    ["", 2, "@2x"],
    ["", 3, "@3x"]
];

var androidFactors = [
    ["drawable-mdpi", 1, ""],
    ["drawable-hdpi", 1.5, ""],
    ["drawable-xhdpi", 2, ""],
    ["drawable-xxhdpi", 3, ""],
    ["drawable-xxxhdpi", 4, ""]
];

var windowsFactors = [
    ["WVGA", 2, ""],
    ["WXGA", 3.2, ""],
    ["720p", 3, ""],
    ["1080p", 3, ""]
];

var webFactors = [
    ["", 1, ""],
    ["", 2, "@2x"]
];

var factors = {
    'ios': iosFactors,
    'android': androidFactors,
    'windows': windowsFactors,
    'web': webFactors
};

var library = {};
library.sandbox = {
    // Utility: display a modal with message
    debug: function(message) {
        var app = [NSApplication sharedApplication];
        [app displayDialog:message withTitle:"Hey"];
    },
    // each-like iterator for Obj-C types
    forEachObj: function(array, callback) {
        var count = [array count];
        for (var i = 0; i < count; i++){
            var el = [array objectAtIndex: i];
            callback(el);
        }
    },
    openInFinder: function(path) {
        var finderTask = [[NSTask alloc] init],
            openFinderArgs = [NSArray arrayWithObjects:"-R", path, nil];

        [finderTask setLaunchPath:"/usr/bin/open"];
        [finderTask setArguments:openFinderArgs];
        [finderTask launch];
    }
}

function main() {
    var fileUrl = [doc fileURL];
    if (fileUrl == null) {
        alert("You need to save your document for me to know where to save it");
        return;
    }

    var baseDir = getDirFromPrompt(getCwd());
    if (baseDir == null) {
        alert("Not saving any assets");
        return;
    }

    var choice = createSelect('Which platform(s) you want to export for?', options, 0)
    if (choice[0] === 1000) {
        //process the selected slices
        var slicesToOutput = selection;
        library.sandbox.forEachObj(slicesToOutput, function(slice) {
            switch(choice[1]) {
                case 0:
                    processSlice(slice, doc, baseDir, 'android');
                    processSlice(slice, doc, baseDir, 'ios');
                    break;
                case 1:
                    processSlice(slice, doc, baseDir, 'android');
                    processSlice(slice, doc, baseDir, 'ios');
                    processSlice(slice, doc, baseDir, 'windows');
                    break;
                case 2:
                    processSlice(slice, doc, baseDir, 'ios');
                    break;
                case 3:
                    processSlice(slice, doc, baseDir, 'android');
                    break;
                case 4:
                    processSlice(slice, doc, baseDir, 'windows');
                    break;
                case 5:
                    processSlice(slice, doc, baseDir, 'web');
                    break;
            }
        });
        library.sandbox.openInFinder(baseDir + "/assets");
    }
}

function createSelect(msg, items, selectedItemIndex){
  selectedItemIndex = selectedItemIndex || 0

  var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0, 0, 200, 25)]
  [accessory addItemsWithObjectValues:items]
  [accessory selectItemAtIndex:selectedItemIndex]

  var alert = [[NSAlert alloc] init]
  [alert setMessageText:msg]
  [alert addButtonWithTitle:'OK']
  [alert addButtonWithTitle:'Cancel']
  [alert setAccessoryView:accessory]

  var responseCode = [alert runModal]
  var sel = [accessory indexOfSelectedItem]

  return [responseCode, sel]
}

function alert(msg) {
    var app = [NSApplication sharedApplication];
    [app displayDialog:msg withTitle:"Hey"];
}

// Return current working directory
// This works better for the designer's workflow, as they mostly want to
// save assets in the current directory
function getCwd() {
    var fileUrl = [doc fileURL],
    filePath = [fileUrl path],
    baseDir = filePath.split([doc displayName])[0];
    return baseDir;
}

// Let the user specify a directory
function getDirFromPrompt() {
    var panel = [NSOpenPanel openPanel];
    [panel setMessage:"Where do you want to place your assets?"];
    [panel setCanChooseDirectories: true];
    [panel setCanChooseFiles: false];
    [panel setCanCreateDirectories: true];
    var defaultDir = [[doc fileURL] URLByDeletingLastPathComponent];
    [panel setDirectoryURL:defaultDir];


    if ([panel runModal] == NSOKButton) {
        var message = [panel filename];
        return message;
    }
}

function processSlice(slice, doc, baseDir, type) {
    var frame = [slice frame];
    var sliceName = [slice name];
    var deviceFactors = factors[type];

    for (var i = 0; i < deviceFactors.length; i++) {
        var name   = deviceFactors[i][0];
        var factor = deviceFactors[i][1];
        var suffix = deviceFactors[i][2];

        log("Processing " + type + " slices: " + sliceName + " " + name + " (" + factor + ")");
        var version = copyLayerWithFactor(slice, factor);
        var fileName = baseDir + "/assets/" + type + "/" + name + "/" + sliceName + suffix + ".png";
        [doc saveArtboardOrSlice: version toFile:fileName];
        log("Saved " + fileName);
    }
}

function copyLayerWithFactor(originalSlice, factor) {
    var copy = [originalSlice duplicate];
    var frame = [copy frame];
    var rect = [copy absoluteDirtyRect]
    slice = [MSExportRequest requestWithRect:rect scale:factor];
    [copy removeFromParent];

    return slice;
}


main();
